{
  "api_contract": {
    "inmuebles": {
      "GET /api/inmuebles": {
        "descripcion": "Devuelve lista de inmuebles con propietario.",
        "respuesta_esperada": [
          {
            "id": "integer",
            "direccion": "string",
            "ciudad": "string",
            "tipo": "string ('Piso', 'Casa', 'Local')",
            "precio_alquiler": "float",
            "disponible": "boolean",
            "propietario_id": "integer",
            "propietario": {
              "id": "integer",
              "nombre": "string",
              "email": "string",
              "telefono": "string"
            }
          }
        ]
      },
      "POST /api/inmuebles": {
        "descripcion": "Crea un nuevo inmueble.",
        "parametros_entrada": {
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string ('Piso', 'Casa', 'Local')",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        },
        "respuesta_esperada": {
          "id": "integer",
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string ('Piso', 'Casa', 'Local')",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        }
      },
      "PUT /api/inmuebles/<id>": {
        "descripcion": "Actualiza un inmueble existente.",
        "parametros_entrada": {
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string ('Piso', 'Casa', 'Local')",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        },
        "respuesta_esperada": {
          "id": "integer",
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string ('Piso', 'Casa', 'Local')",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        }
      },
      "DELETE /api/inmuebles/<id>": {
        "descripcion": "Elimina un inmueble.",
        "respuesta_esperada": {
          "mensaje": "string"
        }
      }
    },
    "propietarios": {
      "GET /api/propietarios": {
        "descripcion": "Devuelve lista de propietarios.",
        "respuesta_esperada": [
          {
            "id": "integer",
            "nombre": "string",
            "email": "string",
            "telefono": "string"
          }
        ]
      }
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios: backend/, backend/models.py, backend/routes.py, backend/__init__.py, app.py.",
        "Definir el factory create_app en backend/__init__.py que inicialice Flask y Flask-SQLAlchemy con la base de datos SQLite 'inmobiliaria.db'.",
        "Crear las clases SQLAlchemy para Propietario, Inmueble e Inquilino en backend/models.py con relaciones adecuadas.",
        "Definir los Blueprints en backend/routes.py: inmuebles_bp y propietarios_bp.",
        "Implementar el endpoint GET /api/inmuebles que consulta todos los inmuebles y serializa la información del propietario anidada.",
        "Implementar POST /api/inmuebles para crear un inmueble validando los datos de entrada y retornando el objeto creado.",
        "Implementar PUT /api/inmuebles/<id> para actualizar campos específicos con validación y retorno actualizado.",
        "Implementar DELETE /api/inmuebles/<id> que elimine el registro y devuelva mensaje de éxito.",
        "Implementar GET /api/propietarios que retorne lista completa de propietarios.",
        "Agregar manejo de errores 404 y 400 en los endpoints del backend.",
        "Crear requirements.txt con Flask, Flask-SQLAlchemy, pytest.",
        "Configurar pytest.ini para pruebas unitarias.",
        "Escribir tests básicos en tests/test_backend.py para validar cada endpoint CRUD.",
        "Incluir script de inicialización de la base de datos (flask shell) y migraciones mínimas si es necesario."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear frontend/index.html con estructura básica: título, tabla para inmuebles y formulario de creación.",
        "Agregar <select> en el formulario que cargue propietarios desde GET /api/propietarios vía fetch al cargar la página.",
        "Implementar JavaScript inline para: obtener lista de inmuebles, renderizar filas de tabla con dirección, precio y nombre del propietario.",
        "Añadir botones 'Editar' y 'Eliminar' a cada fila; el botón Eliminar dispara DELETE /api/inmuebles/<id> y actualiza la vista.",
        "Implementar modal o sección dinámica para editar: prellenar formulario con datos del inmueble seleccionado y enviar PUT /api/inmuebles/<id>.",
        "Crear frontend/propietarios.html con tabla de propietarios, formulario de creación y botones de edición/eliminación similares al index.html.",
        "Agregar enlaces de navegación entre index.html y propietarios.html en la cabecera o barra lateral.",
        "Garantizar que todas las llamadas AJAX utilicen fetch con manejo de errores y actualicen el DOM acorde.",
        "Incluir estilos CSS mínimos inline para tabla y formulario, garantizando legibilidad."
      ]
    }
  ]
}