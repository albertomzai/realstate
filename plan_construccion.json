{
  "api_contract": {
    "/api/inmuebles": {
      "GET": {
        "descripcion": "Obtiene la lista completa de inmuebles con información del propietario.",
        "respuesta_esperada": [
          {
            "id": "integer",
            "direccion": "string",
            "ciudad": "string",
            "tipo": "string (Valores: 'Piso', 'Casa', 'Local')",
            "precio_alquiler": "float",
            "disponible": "boolean",
            "propietario_id": "integer",
            "propietario_nombre": "string"
          }
        ]
      },
      "POST": {
        "descripcion": "Crea un nuevo inmueble.",
        "parametros_entrada": {
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        },
        "respuesta_esperada": {
          "id": "integer",
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        }
      },
      "PUT": {
        "descripcion": "Actualiza un inmueble existente.",
        "parametros_entrada": {
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        },
        "respuesta_esperada": {
          "id": "integer",
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        }
      },
      "DELETE": {
        "descripcion": "Elimina un inmueble.",
        "respuesta_esperada": {
          "mensaje": "string"
        }
      }
    },
    "/api/propietarios": {
      "GET": {
        "descripcion": "Obtiene la lista completa de propietarios.",
        "respuesta_esperada": [
          {
            "id": "integer",
            "nombre": "string",
            "email": "string",
            "telefono": "string"
          }
        ]
      }
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con la estructura de carpetas 'app', 'models', 'routes' y archivos '__init__.py'.",
        "Configurar Flask-SQLAlchemy para usar el archivo SQLite 'inmobiliaria.db' como fuente de datos.",
        "Definir los modelos SQLAlchemy correspondientes a las entidades propietarios, inmuebles e inquilinos con sus relaciones FK.",
        "Crear un esquema de migración básica (o script de creación) que genere las tablas en la base de datos al arrancar el servidor.",
        "Implementar la ruta GET '/api/inmuebles' que consulta todos los inmuebles y devuelve JSON con los campos especificados, incluyendo nombre del propietario mediante join.",
        "Implementar la ruta POST '/api/inmuebles' que valida los datos recibidos, crea un nuevo registro en la tabla inmuebles y retorna el objeto creado.",
        "Implementar la ruta PUT '/api/inmuebles/<id>' que actualiza el inmueble identificado por <id> con los campos enviados y devuelve el registro actualizado.",
        "Implementar la ruta DELETE '/api/inmuebles/<id>' que elimina el inmueble correspondiente y responde con un mensaje de éxito.",
        "Implementar la ruta GET '/api/propietarios' que lista todos los propietarios en formato JSON.",
        "Añadir manejo de errores HTTP (404, 400, 500) para cada endpoint y devolver respuestas JSON estructuradas.",
        "Configurar CORS para permitir peticiones desde el dominio del frontend (localhost).",
        "Escribir pruebas unitarias básicas con pytest que verifiquen la correcta operación de los endpoints CRUD.",
        "Documentar en README las instrucciones para iniciar el servidor Flask y generar la base de datos."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un archivo 'index.html' con la estructura básica HTML5, encabezado, cuerpo y meta viewport.",
        "Incorporar CSS mínimo inline dentro del <style> para dar estilo a una tabla o tarjetas que mostrarán los inmuebles.",
        "Añadir un contenedor principal donde se renderizará la lista de inmuebles.",
        "Crear un formulario de entrada con campos: dirección, ciudad, tipo (select), precio_alquiler, disponible (checkbox) y propietario_id (select).",
        "Cargar la lista de propietarios desde '/api/propietarios' al iniciar la página para poblar el selector del propietario.",
        "Implementar función JavaScript que obtenga todos los inmuebles desde '/api/inmuebles' y renderice cada uno con sus datos, incluyendo botones 'Editar' y 'Eliminar'.",
        "Añadir manejador de evento para el botón 'Eliminar' que envíe una solicitud DELETE al endpoint correspondiente y actualice la vista sin recargar.",
        "Implementar lógica para el botón 'Editar' que muestre un formulario pre-rellenado con los datos del inmueble seleccionado, permitiendo modificar y enviar mediante PUT a la API.",
        "Añadir evento submit al formulario de creación que envíe una solicitud POST a '/api/inmuebles', añadiendo el nuevo registro a la lista mostrada.",
        "Incluir manejo básico de errores en las llamadas fetch para mostrar mensajes de alerta al usuario cuando la API falle.",
        "Garantizar que todas las interacciones se realicen mediante JavaScript ES6 y sin dependencias externas.",
        "Probar la aplicación localmente asegurándose de que CRUD funciona correctamente con el backend Flask."
      ]
    }
  ]
}