{
  "api_contract": [
    {
      "ruta": "/api/inmuebles",
      "metodo": "GET",
      "descripcion": "Obtiene todos los inmuebles con información de su propietario.",
      "parametros_entrada": {},
      "respuesta_esperada": [
        {
          "id": "integer",
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string (Valores: 'Piso', 'Casa', 'Local')",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer",
          "propietario_nombre": "string"
        }
      ]
    },
    {
      "ruta": "/api/inmuebles",
      "metodo": "POST",
      "descripcion": "Crea un nuevo inmueble.",
      "parametros_entrada": {
        "direccion": "string",
        "ciudad": "string",
        "tipo": "string",
        "precio_alquiler": "float",
        "disponible": "boolean",
        "propietario_id": "integer"
      },
      "respuesta_esperada": {
        "id": "integer",
        "direccion": "string",
        "ciudad": "string",
        "tipo": "string",
        "precio_alquiler": "float",
        "disponible": "boolean",
        "propietario_id": "integer"
      }
    },
    {
      "ruta": "/api/inmuebles/<id>",
      "metodo": "PUT",
      "descripcion": "Actualiza un inmueble existente.",
      "parametros_entrada": {
        "direccion": "string",
        "ciudad": "string",
        "tipo": "string",
        "precio_alquiler": "float",
        "disponible": "boolean",
        "propietario_id": "integer"
      },
      "respuesta_esperada": {
        "id": "integer",
        "direccion": "string",
        "ciudad": "string",
        "tipo": "string",
        "precio_alquiler": "float",
        "disponible": "boolean",
        "propietario_id": "integer"
      }
    },
    {
      "ruta": "/api/inmuebles/<id>",
      "metodo": "DELETE",
      "descripcion": "Elimina un inmueble.",
      "parametros_entrada": {},
      "respuesta_esperada": {
        "message": "string"
      }
    },
    {
      "ruta": "/api/propietarios",
      "metodo": "GET",
      "descripcion": "Obtiene todos los propietarios.",
      "parametros_entrada": {},
      "respuesta_esperada": [
        {
          "id": "integer",
          "nombre": "string",
          "email": "string",
          "telefono": "string"
        }
      ]
    }
  ],
  "contrato_qa_e2e": {
    "tabla_inmuebles": "table-inmuebles",
    "boton_agregar": "btn-agregar",
    "input_direccion": "inp-direccion",
    "select_propietario": "sel-propietario",
    "boton_guardar": "btn-guardar",
    "fila_inmueble": "row-inmueble",
    "boton_editar": "btn-editar",
    "boton_eliminar": "btn-eliminar"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar proyecto Flask con estructura de carpetas: backend/, backend/models.py, backend/routes.py, backend/__init__.py.",
        "Crear la instancia de Flask y configurar SQLAlchemy con SQLite 'inmobiliaria.db'.",
        "Definir modelos SQLAlchemy para Propietario, Inmueble e Inquilino según el esquema dado.",
        "Implementar migraciones básicas usando Flask-Migrate (opcional) o crear tablas al arrancar.",
        "Crear Blueprint 'api' en backend/routes.py y registrarlo en la app factory.",
        "Definir endpoint GET '/api/inmuebles' que devuelva lista de inmuebles con datos del propietario.",
        "Definir endpoint POST '/api/inmuebles' que reciba JSON, valide campos requeridos, cree un Inmueble y guarde.",
        "Definir endpoint PUT '/api/inmuebles/<id>' que actualice registro existente después de validar existencia.",
        "Definir endpoint DELETE '/api/inmuebles/<id>' que elimine el registro correspondiente.",
        "Definir endpoint GET '/api/propietarios' para listar propietarios.",
        "Agregar manejo de errores HTTP 404 y 400 con respuestas JSON claras.",
        "Crear archivo 'requirements.txt' con Flask, Flask-SQLAlchemy, Flask-Migrate.",
        "Crear archivo 'app.py' que importe create_app desde backend/__init__.py y ejecute la app.",
        "Configurar entorno para pruebas unitarias: crear carpeta tests/ con test_client de pytest.",
        "Escribir pruebas básicas para cada endpoint GET/POST/PUT/DELETE verificando códigos HTTP y estructuras JSON."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear 'frontend/index.html' con estructura básica: título, tabla de inmuebles y formulario modal.",
        "Agregar enlace a 'propietarios.html' en la barra de navegación.",
        "Implementar JavaScript inline que al cargar la página haga fetch a '/api/inmuebles' y rellene la tabla.",
        "Incluir un <select> dentro del formulario que obtenga propietarios desde '/api/propietarios' y los añada como opciones.",
        "Agregar botón 'Añadir Inmueble' que abra el modal de formulario.",
        "Implementar lógica para enviar datos vía POST a '/api/inmuebles' cuando se envíe el formulario.",
        "Actualizar la tabla tras crear, editar o eliminar sin recargar página.",
        "Para cada fila agregar botones 'Editar' y 'Eliminar' con identificadores únicos.",
        "Al hacer clic en 'Editar', cargar datos del inmueble en el modal pre‑rellenado y enviar vía PUT a '/api/inmuebles/<id>'.",
        "Al hacer clic en 'Eliminar', confirmar acción y enviar DELETE a '/api/inmuebles/<id>' y actualizar la tabla."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear carpeta 'cypress/e2e' y archivo 'inmuebles.cy.js'.",
        "Configurar Cypress para apuntar a localhost:5000.",
        "Escribir prueba que visite '/' y verifique presencia de tabla con id 'table-inmuebles'.",
        "Simular clic en 'Añadir Inmueble', rellenar formulario con datos válidos, enviar y esperar fila nueva.",
        "Verificar que la fila contenga dirección, precio y nombre del propietario.",
        "Simular clic en botón 'Editar' de la nueva fila, cambiar un campo (p.ej. precio), guardar y validar cambio.",
        "Simular clic en botón 'Eliminar', confirmar y verificar desaparición de la fila."
      ]
    }
  ]
}