{
  "api_contract": {
    "ruta": "/api/inmuebles",
    "metodo": "GET",
    "descripcion": "Devuelve una lista de todos los inmuebles con información del propietario.",
    "respuesta_esperada": [
      {
        "id": "integer",
        "direccion": "string",
        "ciudad": "string",
        "tipo": "string (Valores: 'Piso', 'Casa', 'Local')",
        "precio_alquiler": "float",
        "disponible": "boolean",
        "propietario_id": "integer",
        "propietario": {
          "id": "integer",
          "nombre": "string",
          "email": "string",
          "telefono": "string"
        }
      }
    ]
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios: backend/ con subcarpetas app, models, routes y tests.",
        "Definir el paquete __init__.py que inicialice una aplicación Flask con SQLAlchemy configurado para SQLite 'inmobiliaria.db'.",
        "Implementar los modelos propietarios, inmuebles e inquilinos usando Flask-SQLAlchemy con las relaciones indicadas.",
        "Crear un Blueprint en routes/para '/api/inmuebles' y definir los endpoints GET, POST, PUT y DELETE siguiendo el contrato de API.",
        "En el endpoint POST validar la existencia del propietario_id recibido y crear el inmueble asociado.",
        "En el endpoint PUT actualizar solo los campos recibidos y asegurar que el propietario_id sigue siendo válido.",
        "Implementar un endpoint GET '/api/propietarios' que devuelva la lista completa de propietarios.",
        "Añadir manejo de excepciones para errores 404, 400 y 500 con respuestas JSON estructuradas.",
        "Crear tests unitarios en tests/test_backend.py usando pytest y el test client de Flask para cada endpoint CRUD.",
        "Generar un requirements.txt que incluya 'Flask', 'Flask-SQLAlchemy' y 'pytest'.",
        "Configurar el archivo app.py en la raíz para crear la aplicación a partir del factory y ejecutar cuando se lance el módulo."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo frontend/index.html con estructura básica HTML5.",
        "Incluir un bloque de estilo interno CSS para una tabla simple y botones estilizados.",
        "Añadir un formulario al final de la página que permita introducir direccion, ciudad, tipo, precio_alquiler y seleccionar propietario mediante un dropdown cargado vía fetch a '/api/propietarios'.",
        "Implementar JavaScript inline dentro del mismo archivo para: obtener la lista de inmuebles con fetch a '/api/inmuebles', renderizarla en una tabla con columnas dirección, precio, propietario y botones Editar/Eliminar.",
        "Para el botón Editar, mostrar un formulario modal pre-rellenado con los datos del inmueble seleccionado y permitir enviar cambios vía PUT al endpoint correspondiente.",
        "Para el botón Eliminar, enviar una petición DELETE al backend y actualizar la vista sin recargar la página.",
        "Añadir funciones de validación básica en el frontend para campos obligatorios antes de enviar formularios."
      ]
    }
  ]
}