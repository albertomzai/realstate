{
  "api_contract": {
    "/api/inmuebles": {
      "GET": {
        "descripcion": "Devuelve todos los inmuebles con información del propietario.",
        "respuesta_esperada": ["inmueble"]
      },
      "POST": {
        "descripcion": "Crea un nuevo inmueble.",
        "parametros_entrada": {
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string (Piso|Casa|Local)",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        },
        "respuesta_esperada": "inmueble"
      }
    },
    "/api/inmuebles/<int:id>": {
      "PUT": {
        "descripcion": "Actualiza un inmueble existente.",
        "parametros_entrada": {
          "direccion": "string",
          "ciudad": "string",
          "tipo": "string (Piso|Casa|Local)",
          "precio_alquiler": "float",
          "disponible": "boolean",
          "propietario_id": "integer"
        },
        "respuesta_esperada": "inmueble"
      },
      "DELETE": {
        "descripcion": "Elimina un inmueble.",
        "respuesta_esperada": {"message": "string"}
      }
    },
    "/api/propietarios": {
      "GET": {
        "descripcion": "Devuelve todos los propietarios.",
        "respuesta_esperada": ["propietario"]
      }
    }
  },
  "esquema_inmueble": {
    "id": "integer",
    "direccion": "string",
    "ciudad": "string",
    "tipo": "string (Piso|Casa|Local)",
    "precio_alquiler": "float",
    "disponible": "boolean",
    "propietario_id": "integer",
    "propietario": {
      "id": "integer",
      "nombre": "string",
      "email": "string",
      "telefono": "string"
    }
  },
  "esquema_propietario": {
    "id": "integer",
    "nombre": "string",
    "email": "string",
    "telefono": "string"
  },
  "contrato_qa_e2e": {
    "inmueble-table": "inmuebleTable",
    "inmueble-form": "inmuebleForm",
    "propietario-select": "propietarioSelect",
    "btn-guardar-inmueble": "saveInmuebleBtn",
    "btn-editar-inmueble": "editInmuebleBtn",
    "btn-eliminar-inmueble": "deleteInmuebleBtn",
    "link-propietarios": "propietariosLink"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar proyecto Flask con estructura de carpetas base (app.py, backend/__init__.py).",
        "Crear fichero requirements.txt con dependencias 'Flask', 'Flask-SQLAlchemy', 'pytest'.",
        "Crear pytest.ini configurando pythonpath = .",
        "Definir modelo SQLAlchemy para Propietario, Inmueble e Inquilino en backend/models.py.",
        "Configurar base de datos SQLite 'inmobiliaria.db' en backend/__init__.py usando Flask-SQLAlchemy.",
        "Crear Blueprints para inmuebles y propietarios en backend/routes/inmuebles.py y backend/routes/propietarios.py.",
        "Implementar endpoint GET /api/inmuebles retornando lista con propietario embebido.",
        "Implementar endpoint POST /api/inmuebles creando registro y devolviendo objeto creado.",
        "Implementar endpoint PUT /api/inmuebles/<id> actualizando campos recibidos.",
        "Implementar endpoint DELETE /api/inmuebles/<id> eliminando registro.",
        "Implementar endpoint GET /api/propietarios retornando lista de propietarios.",
        "Añadir validaciones básicas de entrada y manejo de errores (404, 400).",
        "Crear app.py en raíz importando create_app desde backend y ejecutando la aplicación Flask."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear archivo frontend/index.html con tabla de inmuebles, formulario de nuevo inmueble y enlaces a propietarios.html.",
        "Agregar <select> en el formulario para cargar propietarios vía GET /api/propietarios.",
        "Incluir botones 'Editar' y 'Eliminar' en cada fila de la tabla con data-testid correspondientes.",
        "Implementar JavaScript autocontenida que recupere inmuebles, rellene la tabla y maneje eventos de creación, edición y eliminación.",
        "Crear archivo frontend/propietarios.html con tabla de propietarios y formulario de nuevo propietario, enlazado desde index.html."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Configurar carpeta cypress/e2e con archivo test.cy.js.",
        "Escribir prueba que navegue a frontend/index.html, cree un inmueble nuevo seleccionando propietario existente y verifique su aparición en la tabla."
      ]
    }
  ]
}
